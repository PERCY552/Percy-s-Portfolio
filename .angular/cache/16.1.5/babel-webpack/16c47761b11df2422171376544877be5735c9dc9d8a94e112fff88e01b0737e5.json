{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport { Mode } from \"../components/theme-switcher/theme-options\";\nimport * as i0 from \"@angular/core\";\nexport class ThemeService {\n  constructor() {\n    this.currentValue = new BehaviorSubject(this.getThemePreference());\n  }\n  isDarkPreference() {\n    const deviceMode = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    if (deviceMode.matches) {\n      return true;\n    }\n    return false;\n  }\n  setLightTheme() {\n    document.body.classList.remove(Mode.DARK);\n    document.body.classList.add(Mode.LIGHT);\n  }\n  setDarkTheme() {\n    document.body.classList.remove(Mode.LIGHT);\n    document.body.classList.add(Mode.DARK);\n  }\n  setTheme(name) {\n    if (this.checkTheme(name) === Mode.LIGHT) {\n      this.setLightTheme();\n    } else {\n      this.setDarkTheme();\n    }\n    this.currentValue.next(name);\n  }\n  checkTheme(name) {\n    if (name === Mode.AUTO) {\n      if (this.isDarkPreference()) {\n        return Mode.DARK;\n      } else {\n        return Mode.LIGHT;\n      }\n    } else if (name === Mode.DARK) {\n      return Mode.DARK;\n    } else {\n      return Mode.LIGHT;\n    }\n  }\n  initTheme() {\n    const mode = this.getThemePreference();\n    this.setTheme(mode);\n  }\n  saveThemePreference(name) {\n    this.setTheme(name);\n    localStorage.setItem('theme', name);\n  }\n  getThemePreference() {\n    let theme = localStorage.getItem('theme');\n    if (!theme) {\n      if (this.isDarkPreference()) {\n        return Mode.DARK;\n      } else {\n        return Mode.LIGHT;\n      }\n    }\n    return theme;\n  }\n}\nThemeService.ɵfac = function ThemeService_Factory(t) {\n  return new (t || ThemeService)();\n};\nThemeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ThemeService,\n  factory: ThemeService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"names":["BehaviorSubject","Mode","ThemeService","constructor","currentValue","getThemePreference","isDarkPreference","deviceMode","window","matchMedia","matches","setLightTheme","document","body","classList","remove","DARK","add","LIGHT","setDarkTheme","setTheme","name","checkTheme","next","AUTO","initTheme","mode","saveThemePreference","localStorage","setItem","theme","getItem","factory","ɵfac","providedIn"],"sources":["C:\\Users\\molok\\Videos\\PERCY RAKGOALE'S PORTFOLIO\\src\\app\\services\\theme.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { Mode } from \"../components/theme-switcher/theme-options\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class ThemeService {\n  public currentValue = new BehaviorSubject<Mode>(this.getThemePreference());\n\n  private isDarkPreference(): boolean {\n    const deviceMode = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    if (deviceMode.matches) {\n      return true;\n    }\n    return false;\n  }\n\n  private setLightTheme(): void {\n    document.body.classList.remove(Mode.DARK);\n    document.body.classList.add(Mode.LIGHT);\n  }\n\n  private setDarkTheme(): void {\n    document.body.classList.remove(Mode.LIGHT);\n    document.body.classList.add(Mode.DARK);\n  }\n\n  private setTheme(name: Mode) {\n    if (this.checkTheme(name) === Mode.LIGHT) {\n      this.setLightTheme();\n    } else {\n      this.setDarkTheme();\n    }\n    this.currentValue.next(name);\n  }\n\n  public checkTheme(name: Mode): Mode {\n    if (name === Mode.AUTO) {\n      if (this.isDarkPreference()) {\n        return Mode.DARK;\n      } else {\n        return Mode.LIGHT;\n      }\n    }\n    else if (name === Mode.DARK) {\n      return Mode.DARK;\n    } else {\n      return Mode.LIGHT;\n    }\n  }\n\n  public initTheme(): void {\n    const mode = this.getThemePreference();\n    this.setTheme(mode);\n  }\n\n  public saveThemePreference(name: Mode): void {\n    this.setTheme(name);\n    localStorage.setItem('theme', name);\n  }\n\n  public getThemePreference(): Mode {\n    let theme: string | null = localStorage.getItem('theme');\n    if (!theme) {\n      if (this.isDarkPreference()) {\n        return Mode.DARK;\n      } else {\n        return Mode.LIGHT;\n      }\n    }\n    return theme as Mode;\n  }\n\n}\n"],"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;AACtC,SAASC,IAAI,QAAQ,4CAA4C;;AAKjE,OAAM,MAAOC,YAAY;EAHzBC,YAAA;IAIS,KAAAC,YAAY,GAAG,IAAIJ,eAAe,CAAO,IAAI,CAACK,kBAAkB,EAAE,CAAC;;EAElEC,gBAAgBA,CAAA;IACtB,MAAMC,UAAU,GAAGC,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC;IACpE,IAAIF,UAAU,CAACG,OAAO,EAAE;MACtB,OAAO,IAAI;;IAEb,OAAO,KAAK;EACd;EAEQC,aAAaA,CAAA;IACnBC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAACd,IAAI,CAACe,IAAI,CAAC;IACzCJ,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACG,GAAG,CAAChB,IAAI,CAACiB,KAAK,CAAC;EACzC;EAEQC,YAAYA,CAAA;IAClBP,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAACd,IAAI,CAACiB,KAAK,CAAC;IAC1CN,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACG,GAAG,CAAChB,IAAI,CAACe,IAAI,CAAC;EACxC;EAEQI,QAAQA,CAACC,IAAU;IACzB,IAAI,IAAI,CAACC,UAAU,CAACD,IAAI,CAAC,KAAKpB,IAAI,CAACiB,KAAK,EAAE;MACxC,IAAI,CAACP,aAAa,EAAE;KACrB,MAAM;MACL,IAAI,CAACQ,YAAY,EAAE;;IAErB,IAAI,CAACf,YAAY,CAACmB,IAAI,CAACF,IAAI,CAAC;EAC9B;EAEOC,UAAUA,CAACD,IAAU;IAC1B,IAAIA,IAAI,KAAKpB,IAAI,CAACuB,IAAI,EAAE;MACtB,IAAI,IAAI,CAAClB,gBAAgB,EAAE,EAAE;QAC3B,OAAOL,IAAI,CAACe,IAAI;OACjB,MAAM;QACL,OAAOf,IAAI,CAACiB,KAAK;;KAEpB,MACI,IAAIG,IAAI,KAAKpB,IAAI,CAACe,IAAI,EAAE;MAC3B,OAAOf,IAAI,CAACe,IAAI;KACjB,MAAM;MACL,OAAOf,IAAI,CAACiB,KAAK;;EAErB;EAEOO,SAASA,CAAA;IACd,MAAMC,IAAI,GAAG,IAAI,CAACrB,kBAAkB,EAAE;IACtC,IAAI,CAACe,QAAQ,CAACM,IAAI,CAAC;EACrB;EAEOC,mBAAmBA,CAACN,IAAU;IACnC,IAAI,CAACD,QAAQ,CAACC,IAAI,CAAC;IACnBO,YAAY,CAACC,OAAO,CAAC,OAAO,EAAER,IAAI,CAAC;EACrC;EAEOhB,kBAAkBA,CAAA;IACvB,IAAIyB,KAAK,GAAkBF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;IACxD,IAAI,CAACD,KAAK,EAAE;MACV,IAAI,IAAI,CAACxB,gBAAgB,EAAE,EAAE;QAC3B,OAAOL,IAAI,CAACe,IAAI;OACjB,MAAM;QACL,OAAOf,IAAI,CAACiB,KAAK;;;IAGrB,OAAOY,KAAa;EACtB;;AAjEW5B,YAAY,C;mBAAZA,YAAY;AAAA;AAAZA,YAAY,C;SAAZA,YAAY;EAAA8B,OAAA,EAAZ9B,YAAY,CAAA+B,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}